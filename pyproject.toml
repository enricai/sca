[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "semantic-code-analyzer"
version = "0.1.0"
description = "Semantic similarity analysis for code commits with Apple M3 acceleration"
readme = "README.md"
authors = [
    {name = "SCA Team", email = "sca@example.com"},
]
license = {file = "LICENSE"}
requires-python = ">=3.9"
keywords = ["code-analysis", "semantic-similarity", "git", "ml", "apple-silicon"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Version Control :: Git",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core ML dependencies optimized for Apple Silicon
    "torch>=2.1.0",
    "transformers>=4.35.0",
    "datasets>=2.14.0",

    # Git integration
    "gitpython>=3.1.40",

    # Scientific computing
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "scipy>=1.11.0",

    # Utilities
    "tqdm>=4.66.0",
    "rich>=13.0.0",
    "click>=8.1.0",

    # Data handling
    "pandas>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
]

docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/sca/semantic-code-analyzer"
Documentation = "https://semantic-code-analyzer.readthedocs.io/"
Repository = "https://github.com/sca/semantic-code-analyzer.git"
Issues = "https://github.com/sca/semantic-code-analyzer/issues"

[project.scripts]
sca-analyze = "semantic_code_analyzer.cli:main"

[tool.hatch.build.targets.sdist]
include = [
    "/semantic_code_analyzer",
    "/tests",
]

[tool.hatch.build.targets.wheel]
packages = ["semantic_code_analyzer"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage configuration
[tool.coverage.run]
source = ["semantic_code_analyzer"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]