# Pre-commit configuration for Semantic Code Analyzer
# See https://pre-commit.com for more information

repos:
  # Basic file formatting and cleanup
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-toml
      - id: check-json
      - id: check-xml
      - id: check-merge-conflict
      - id: check-added-large-files
        args: ["--maxkb=10000"] # 10MB limit
      - id: check-case-conflict
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: debug-statements
      - id: fix-byte-order-marker
      - id: mixed-line-ending
        args: ["--fix=lf"]

  # Python-specific hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-ast
      - id: check-builtin-literals
      - id: check-docstring-first
      - id: name-tests-test
        args: ["--pytest-test-first"]

  # Python code formatting with Black
  - repo: https://github.com/psf/black
    rev: 23.11.0
    hooks:
      - id: black
        language_version: python3
        args: ["--line-length=88"]
        files: ^(semantic_code_analyzer|tests|examples)/.*\.py$

  # Import sorting with isort
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: ["--profile=black", "--line-length=88"]
        files: ^(semantic_code_analyzer|tests|examples)/.*\.py$

  # Linting with Ruff (replaces flake8, pycodestyle, pyflakes, etc.)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.6.9
    hooks:
      - id: ruff
        args: ["--fix", "--exit-non-zero-on-fix"]
        files: ^(semantic_code_analyzer|tests|examples)/.*\.py$

  # Type checking with mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.1
    hooks:
      - id: mypy
        additional_dependencies:
          - types-requests
          - types-PyYAML
        args: ["--ignore-missing-imports", "--show-error-codes"]
        files: ^(semantic_code_analyzer|tests|examples)/.*\.py$

  # Security scanning with bandit
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        additional_dependencies: [pbr]
        args: ["--skip", "B101"]
        files: ^(semantic_code_analyzer|examples|tests)/.*\.py$

  # Check for common security issues
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ["--baseline", ".secrets.baseline"]
        files: ^(semantic_code_analyzer|examples|tests)/.*\.(py|yaml|yml|json|txt|md)$

  # Documentation and docstring formatting
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: ["--convention=google"]
        exclude: ^(tests/|examples/)

  # Check requirements.txt files
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        files: requirements.*\.txt$

  # Upgrade Python syntax
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.15.0
    hooks:
      - id: pyupgrade
        args: ["--py39-plus"]

  # Check for dead code
  - repo: https://github.com/jendrikseipp/vulture
    rev: v2.10
    hooks:
      - id: vulture
        args: ["semantic_code_analyzer/", "--min-confidence=80"]

  # Format YAML files
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        types: [yaml]

  # Check Markdown files
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        args: ["--fix"]

  # Check shell scripts
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck

  # Conventional commits
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.0.0
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]
        args: ["--strict"]

  # License header check
  - repo: https://github.com/Lucas-C/pre-commit-hooks
    rev: v1.5.4
    hooks:
      - id: insert-license
        files: \.py$
        args:
          - --license-filepath
          - LICENSE
          - --comment-style
          - "#"

  # Local hooks for project-specific checks
  - repo: local
    hooks:
      # Run tests before commit
      - id: pytest-check
        name: pytest-check
        entry: pytest
        language: system
        args: ["tests/", "--maxfail=1", "-x"]
        pass_filenames: false
        always_run: true
        stages: [pre-commit]

      # Check that version numbers are consistent
      - id: version-consistency
        name: version-consistency
        entry: python
        language: system
        args:
          [
            "-c",
            'import semantic_code_analyzer; print(f"Version: {semantic_code_analyzer.__version__}")',
          ]
        pass_filenames: false
        always_run: true

      # Ensure examples are up to date
      - id: examples-syntax-check
        name: examples-syntax-check
        entry: python
        language: system
        args: ["-m", "py_compile"]
        files: ^examples/.*\.py$

      # Check that CLI is importable
      - id: cli-import-check
        name: cli-import-check
        entry: python
        language: system
        args:
          [
            "-c",
            'from semantic_code_analyzer.cli import cli; print("CLI import successful")',
          ]
        pass_filenames: false
        always_run: true

# Global configuration
default_install_hook_types: [pre-commit, commit-msg]
default_stages: [pre-commit]

# Exclude patterns
exclude: |
  (?x)^(
    \.git/.*|
    \.venv/.*|
    venv/.*|
    \.pytest_cache/.*|
    __pycache__/.*|
    \.mypy_cache/.*|
    build/.*|
    dist/.*|
    .*\.egg-info/.*|
    \.embedding_cache\.pkl|
    models/.*|
    .*\.ipynb|
    .*_similarity_results\.json
  )$

# Minimum version required
minimum_pre_commit_version: "3.0.0"

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ""
  autoupdate_commit_msg: "[pre-commit.ci] pre-commit autoupdate"
  autoupdate_schedule: weekly
  skip: [pytest-check] # Skip heavy tests in CI
  submodules: false
